/*
* cutlery.js 3.3.0 - https://github.com/lennertderyck/cutleryjs
* Licensed under the GNU GPLv3 license - https://choosealicense.com/licenses/gpl-3.0/#
*
* Copyright (c) 2020 Lennert De Ryck
*/

export const node=(t,e=!1)=>{const n=document.querySelectorAll(t);return 0==e?n[0]:n};export class Element{constructor(t){if("string"!=typeof t)throw new Error("The tagname of this new element is not of the type string");try{this.el=document.createElement(t)}catch(t){console.error("Something went wrong when creating a new element. We logged the error message for you convenience:"),console.log(t)}this.content=""}class(t){if("object"!=typeof t)throw new Error("You should use an array for adding classes to an element");try{t.map(t=>this.el.classList.add(t))}catch(t){console.error("Something went wrong when adding classes. We logged this element and the error message for you convenience:"),console.log(t),console.log(this.el)}}attributes(t){if("object"!=typeof t)throw new Error("You should use an array for adding attributes to an element");try{t.map(t=>this.el.setAttribute(t[0],t[1]))}catch(t){console.error("Something went wrong when adding attribtues. We logged this element and the error message for you convenience:"),console.log(t),console.log(this.el)}}inner(t){this.el.innerHTML=t||this.content}log(){console.log(this.el)}append(t="html body"){"string"==typeof t?t=returnNode(t):"object"==typeof t&&(t=t);try{t.appendChild(this.el)}catch(t){console.error("Something went wrong when adding an element. You've probably entered a wrong selector or node element. We logged this element and the error message for you convenience:"),console.log(t),console.log(this.el)}}prepend(t="html body"){"string"==typeof t?t=returnNode(t):"object"==typeof t&&(t=t);try{t.prepend(this.el)}catch(t){console.error("Something went wrong when adding an element. You've probably entered a wrong selector or node element. We logged this element and the error message for you convenience:"),console.log(t),console.log(this.el)}}return(t){return this.el}}export const eventCallback=(t,e,n=!0)=>{let o=null;o=1==n?event.target.closest(`[data-action="${t}"]`):event.target.closest(t),o&&e(o)};export const getFormData=t=>{const e=new Set,n=new FormData(t),o=new Map;return t.querySelectorAll("[name]").forEach(t=>{e.add({name:t.getAttribute("name"),type:t.getAttribute("type")||"textarea"})}),e.forEach(t=>{const e=n.get(t.name);"number"==t.type?o.set(t.name,parseFloat(e)):"checkbox"==t.type?o.set(t.name,null!=e&&("on"==e||e)):o.set(t.name,e)}),o};export const cookies={set(t,e,n){if(n){const t=new Date;t.setTime(t.getTime()+24*n*60*60*1e3);var o="expires="+t.toGMTString()}else o="";document.cookie=`${t}=${e}; ${o}; path=/`},get(t){const e=t+"=",n=document.cookie.split(";");for(var o=0;o<n.length;o++){for(var r=n[o];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(e))return r.substring(e.length,r.length)}return null}};export const fetchAPI={async json(t,e={method:"GET"}){try{let n=await fetch(t,e);return await n.json()}catch{throw new Error("Something went really wrong fetching this api",t)}},async text(t,e={method:"GET"}){try{let n=await fetch(t,e);return await n.text()}catch{throw new Error("Something went really wrong fetching this api",t)}},async html(t){}};export class Api{constructor(t,e={method:"GET"}){this.url=t,this.options=e}async fetch(t=this.options){try{return this.response=await fetch(this.url,this.options),this.response}catch{throw new Error("Something went really wrong fetching this api",url)}}async status(){return await this.fetch()}async JSON(){return(await this.fetch()).json()}async TEXT(){return(await this.fetch()).text()}}export class LocalDB{constructor(t){this.name=t,this.data=[],0==this.exist()&&window.localStorage.setItem(t,JSON.stringify({name:this.name,data:this.data}))}getData(){const t=window.localStorage.getItem(this.name);return t?JSON.parse(t).data:"There is no localStorage item with this name"}exist(){const t=window.localStorage.getItem(this.name);return t||!1}detatch(){return window.localStorage.removeItem(this.name),console.log(`local database '${this.name}' removed`),this.name}store(t){window.localStorage.setItem(this.name,JSON.stringify({name:this.name,data:t}))}addMeta(t){t.map(t=>{t.__id=(new Date).getTime()})}add(t,e){const n=this.getData(),o=0==Array.isArray(t)?[t]:t;this.addMeta(o),this.data=(Array.isArray(t),[...n,...o]),this.store(this.data),e&&e()}update(t,e,n){this.getData();const o=this.item({__id:t});Object.keys(e).map(t=>{console.log(e[t]),console.log(o[t])}),n&&n();for(const e=0;e<o.length;e++)if(o[e].__id===t)return void(o[e].Username=newValue)}remove(t,e){const n=this.getData(),o=Object.keys(t)[0],r=n.findIndex(e=>e[o]==t[o]);n.splice(r,1),this.store(n),e&&e()}item(t){const e=this.getData(),n=Object.keys(t)[0];return e.find(e=>e[n]==t[n])}count(){return this.getData().length}empty(){this.store([])}}export const returnNode=(t,e=!1)=>{if("object"==typeof t)return t;if("string"==typeof t){const n=document.querySelectorAll(t);return 0==e?n[0]:n}};export const returnTag=t=>returnNode(t).tagName.toLowerCase();export const fieldTypes=t=>{const e=new Map,n=returnNode(t),o=returnTag(t);if("form"==o){return n.querySelectorAll("input, textarea").forEach(t=>{t.type&&t.name?e.set(t.name,t.type):"textarea"==returnTag(t)?e.set(t.name,"textarea"):e.set("no name",t.type)}),e}return"input"==o&&n.type?n.type:"textarea"==o?"textarea":"no element found or type specified"};export const connection={state(){const t=window.navigator.onLine,e=t?navigator.connection.effectiveType:t;return console.log("Connection types:\n0: offline\n1: slow\n2: good\n3: strong"),{false:0,"slow-2g":1,"2g":1,"3g":2,"4g":3}[e]},watch(t=null){navigator.connection.addEventListener("change",()=>{const e=connection.state();t(e)})}};export class Toast{constructor({title:t,content:e,timer:n=6e3,classes:o=[],attributes:r=[]}){this.toast=new Element("div"),this.toast.class(["toast","animate__animated","animate__fadeInUp","animate__faster",...o]),this.toast.inner(`\n            <div class="toast__wrapper">\n                <div class="toast__controls">\n                <div data-action="closeToast">\n                    <i class='bx bx-x'></i>\n                </div>\n                </div>\n                <div class="toast__content">\n                <h5 class="toast__title">${t}</h5>\n                <div class="toast__body">\n                    <p>${e}</p>\n                </div>\n                </div>\n            </div>\n            <div class="toast__timer"></div>\n        `),this.toast.attributes([["style",`--timer-duration: ${n}ms`]]),this.toast.append("#toasts .toasts__wrapper"),setTimeout(()=>{fadeOutNode(this.toast.return())},n),setTimeout(()=>{this.toast.return().remove()},n+2e3)}}const fadeOutNode=t=>{t.classList.remove("animate__fadeInUp"),t.classList.add("animate__fadeOutDown")};export const updateClipboard=async t=>{const{state:e}=await navigator.permissions.query({name:"clipboard-write"});if("granted"==e||"prompt"==e)try{await navigator.clipboard.writeText(t),console.log("copied")}catch(t){console.error(t)}};Node.prototype.event=function(t){const e=t.startsWith("on"),n=void 0!==this[t];if(t=0==e?"on"+t:t,0==n)throw new Error(`This type of event (${t}) doesn't exist`);return e=>this[t]=e};