/*!
* cutlery.js 1.8.0 - https://github.com/lennertderyck/cutleryjs
* Licensed under the GNU GPLv3 license - https://choosealicense.com/licenses/gpl-3.0/#
*
* Copyright (c) 2020 Lennert De Ryck
*/

const node=(e,t=!1)=>0==t?document.querySelector(e):document.querySelectorAll(e);class Element{constructor(e){if("string"!=typeof e)throw new Error("The tagname of this new element is not of the type string");try{this.el=document.createElement(e)}catch(e){console.error("Something went wrong when creating a new element. We logged the error message for you convenience:"),console.log(e)}}class(e){if("object"!=typeof e)throw new Error("You should use an array for adding classes to an element");try{e.map(e=>this.el.classList.add(e))}catch(e){console.error("Something went wrong when adding classes. We logged this element and the error message for you convenience:"),console.log(e),console.log(this.el)}}attributes(e){if("object"!=typeof e)throw new Error("You should use an array for adding attributes to an element");try{e.map(e=>this.el.setAttribute(e[0],e[1]))}catch(e){console.error("Something went wrong when adding attribtues. We logged this element and the error message for you convenience:"),console.log(e),console.log(this.el)}}inner(e){this.el.innerHTML=e}log(){console.log(this.el)}append(e="html body",t="selector"){"string"==typeof e?e=document.querySelector(e):"object"==typeof e&&(e=e);try{e.appendChild(this.el)}catch(e){console.error("Something went wrong when adding an element. You've probably entered a wrong selector or node element. We logged this element and the error message for you convenience:"),console.log(e),console.log(this.el)}}prepend(e="html body",t="selector"){"string"==typeof e?e=document.querySelector(e):"object"==typeof e&&(e=e);try{e.prepend(this.el)}catch(e){console.error("Something went wrong when adding an element. You've probably entered a wrong selector or node element. We logged this element and the error message for you convenience:"),console.log(e),console.log(this.el)}}return(){return this.el}}const eventCallback=(e,t,o=!0)=>{let n=null;n=1==o?event.target.closest(`[data-action="${e}"]`):event.target.closest(e),n&&t(n)},getFormData=e=>{const t=new Set,o=new FormData(e),n=new Map;return e.querySelectorAll("[name]").forEach(e=>{t.add({name:e.getAttribute("name"),type:e.getAttribute("type")||"textarea"})}),t.forEach(e=>{n.set(e.name,"number"==e.type?parseFloat(o.get(e.name)):o.get(e.name))}),n},cookies={set(e,t,o){if(o){const e=new Date;e.setTime(e.getTime()+24*o*60*60*1e3);var n="expires="+e.toGMTString()}else n="";document.cookie=`${e}=${t}; ${n}; path=/`},get(e){const t=e+"=",o=document.cookie.split(";");for(var n=0;n<o.length;n++){for(var r=o[n];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t))return r.substring(t.length,r.length)}return null}},fetchAPI={async json(e,t={method:"GET"}){try{let o=await fetch(e,t);return await o.json()}catch{throw new Error("Something went really wrong fetching this api",e)}},async text(e,t={method:"GET"}){try{let o=await fetch(e,t);return await o.text()}catch{throw new Error("Something went really wrong fetching this api",e)}}};class Api{constructor(e,t={method:"GET"}){this.url=e,this.options=t}async fetch(e=this.options){try{return this.response=await fetch(url,e),this.response}catch{throw new Error("Something went really wrong fetching this api",url)}}async JSON(){return this.data=await this.response.json(),this.data}async TEXT(){return this.data=await this.response.text(),this.data}async HTML(){const e=this.TEXT(),t=new Element("template");return t.inner(e),t}}export{node,Element,eventCallback,getFormData,cookies,fetchAPI,Api};